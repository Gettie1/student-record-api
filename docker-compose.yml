
# version: '3.8'

services:
  students-records_db:
    image: postgres:15-alpine
    container_name: students-records_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "@getrude123"
      POSTGRES_DB: students-records_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data  
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0-alpine
    container_name: redis-cache
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s  
      retries: 5
  nestjs-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs-app

    depends_on:
      redis:
        condition: service_healthy
      students-records_db:
        condition: service_healthy
    ports:
      - "8000:8000"

    environment:
     - NODE_ENV=development
     - PORT=8000
     - REDIS_HOST=redis
     - REDIS_PORT=6379
     - REDIS_PASSWORD=${REDIS_PASSWORD}
     - DATABASE_URL=postgresql://postgres:%40getrude123@students-records_db:5432/students-records_db  
     - DB_HOST=students-records_db
     - DB_PORT=5432
     - DB_USER=postgres
     - DB_PASSWORD=@getrude123
     - DB_NAME=students-records_db
     - DB_SYNC=false
     - DB_LOGGING=false
     - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
     - JWT_ACCESS_TOKEN_SECRET=${JWT_ACCESS_TOKEN_SECRET:-your_access_token_secret}
     - JWT_REFRESH_TOKEN_SECRET=${JWT_REFRESH_TOKEN_SECRET:-your_refresh_token_secret}
     - JWT_ACCESS_TOKEN_EXPIRE_IN=${JWT_ACCESS_TOKEN_EXPIRE_IN:-15m}
     - JWT_REFRESH_TOKEN_EXPIRE_IN=${JWT_REFRESH_TOKEN_EXPIRE_IN:-7d}
     - THROTTLE_LIMIT=${THROTTLE_LIMIT:-100}
     - THROTTLE_TTL=${THROTTLE_TTL:-6000}




    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - app-network
    command: npm run dev 

volumes:
  pgdata:
    name: students-records-management-pgdata
    driver: local
  redis-data:
    name: students-records-redis-cache-data
    driver: local

networks:
  app-network:
    driver: bridge